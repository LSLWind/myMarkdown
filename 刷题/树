

#### leetcode-669修剪二叉搜索树

给定一个二叉搜索树，同时给定最小边界`L` 和最大边界 `R`。通过修剪二叉搜索树，使得所有节点的值在`[L, R]`中 (R>=L) 。你可能需要改变树的根节点，所以结果应当返回修剪好的二叉搜索树的新的根节点。

**示例 1:**

```
输入: 
    1
   / \
  0   2

  L = 1
  R = 2

输出: 
    1
      \
       2
```

**示例 2:**

```
输入: 
    3
   / \
  0   4
   \
    2
   /
  1

  L = 1
  R = 3

输出: 
      3
     / 
   2   
  /
 1
```

因为给定的是二叉搜索树，所以很好剪枝，当前节点<L，则其left也一并剪掉，换为right即可，当前节点>R，则right剪掉，换为left

```java
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode trimBST(TreeNode root, int L, int R) {
        //构造一个哨兵
        TreeNode sentry=new TreeNode(-1);
        sentry.left=root;
        sentry.right=null;
        recursion(sentry,root,L,R);
        
        if(L<=sentry.left.val&&sentry.left.val<=R)return sentry.left;
        else return sentry.right;
    }
    private void recursion(TreeNode pre,TreeNode current,int L,int R){
        if(current==null)return ;
        //对当前节点剪枝
        if(current.val<L){
            pre.left=current.right;
            recursion(pre,pre.left,L,R);
        }
        else if(current.val>R){
            pre.right=current.left;
            recursion(pre,pre.right,L,R);
        }
        else{
            recursion(current,current.left,L,R);
            recursion(current,current.right,L,R);
        }
    }
}
```



