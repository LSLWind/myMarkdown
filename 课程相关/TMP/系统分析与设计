## 面向对象分析与设计

**UML**：统一建模语言，使用面向对象方法概念进行系统建模的一组表示法。UML的出现使OOA/OOD的表示变得一致。 图像化的UML包括用例图、活动图、类图、顺序图、状态图等

**分析与设计**：

* 分析：调查研究问题与需求，需求分析（功能/性能需求）→对象分析（领域对象的研究）
* 设计：总体解决方案与蓝图，对象涉及→数据库设计

**面向对象与面向过程差别**

面向对象的分析设计强调以对象尺度的分解，从问题中发现和描述概念（现实中的对象）。定义可（在OOP语言中）实现的软件对象及其协作

面向过程：结构化的分析和设计依据功能与过程，将复杂问题分解为具有层次关系的子过程

**职责分配**：考虑两个主要问题：对象（软件组件）应该具有具备哪些功能（职责）、某个功能应该在哪个对象中，职责的分配关系到软件的可重用性、健壮性、可维护性。

**分析设计过程**

定义用例→定义领域模型→定义交互图→定义设计类图

![image-20200821134326612](H:\markdown文档\myMarkdown\课程相关\TMP\系统分析与设计.assets\image-20200821134326612.png)

![image-20200821134402735](H:\markdown文档\myMarkdown\课程相关\TMP\系统分析与设计.assets\image-20200821134402735.png)

![image-20200821134423943](H:\markdown文档\myMarkdown\课程相关\TMP\系统分析与设计.assets\image-20200821134423943.png)

## 迭代开发和统一过程

**Unified Procss（统一过程）**

一种流行的构造面向对象软件的开发过程。定义如何进行OOA/D的过程和制品（工件）。迭代开发过程

**迭代开发**

![image-20200821135008303](H:\markdown文档\myMarkdown\课程相关\TMP\系统分析与设计.assets\image-20200821135008303.png)

**优势**： 短时间分阶段的迭代。早期解决高风险和关键问题（风险驱动）。在早期迭代中建立内聚核心构架。不会被长期的分析所困扰 。不断让用户参与评估、反馈需求 。不断学习、不断完善 。较早的看到部分成果 。不断验证质量

**UP阶段**

* 初始阶段 ：大体的构想 
* 细化阶段 ：已精化的构想，高风险的解决，需求识别 
*  构造阶段：迭代实现留下的风险较低的和比较容易的元素 
* 移交阶段 ： 测试、部署

![image-20200821145536215](H:\markdown文档\myMarkdown\课程相关\TMP\系统分析与设计.assets\image-20200821145536215.png)

![image-20200821145558402](H:\markdown文档\myMarkdown\课程相关\TMP\系统分析与设计.assets\image-20200821145558402.png)

![image-20200821135710590](H:\markdown文档\myMarkdown\课程相关\TMP\系统分析与设计.assets\image-20200821135710590.png)

##  项目初始阶段

**特点**：初试阶段信息并不充足 、还没有项目的准备 、需要尽快确定后续的工作

**目标** ：预见项目的范围、构想和业务案例 ；确定项目是否值得继续研究 

**工件（Artifacts）和文档**：后续有用的工件 、需要在后续迭代过程中进一步细化的工件

**初始阶段的工件样例**
构想和业务案例、用例模型、补充规范、术语表、风险列表和风险管理计划、原形和概念验证、迭代计划 、阶段计划和软件开发计划 、开发案例

##  需求

**需求**： 软件项目中必需提供的能力和必需满足的约束

* 瀑布法的需求：在设计前弄清需求
* 统一过程的需求—进化式需求：逐步细化的需求 、允许需求的变化

**功能需求**：使用用例模型和系统特性表描述
**非功能性需求** ：可以使用系统的补充规范描述

**FURPS+需求类型**

*  FURPS ：功能性(Functional)、可用性(Usablity)、可靠性(Rliability)、性能(Performance) 、可支持性(Supportability) 
* 辅助需求 ：实现(Implementation)、接口(Interface)、操作(Operation)、包装(Packaging)、授权(Legal)

## 用例模型
**定义**：用例模型（Use Case Model）是描述系统功能和环境的模型

用例是最好的理解和描述需求的办法 

* 用例：使用系统时的情况
* 抛开人机界面分析系统的功能需求

**用例分析**

* 参与者：具有行为能力的人或者计算机系统。 （于系统打交道的事物）。 
* 场景：参与者与系统进行的交互活动。包括成功场景 、失败场景
*  分析场景（用例分析）：怎么才能为用户实现他们的目标，为用户提供可观察的返回值。避免罗列功能清单
* 黑箱用例和系统职责：系统应该做什么，而不是应该怎么做。

**用例模型**

* 用例的描述--使用文本文档描述的活动
* 辅助描述—UML的用例图 ：用于描述系统与环境(参与者)的语境、作为用例模型的引导

**用例描述的一些准则** ：以无用户界面的风格编写、编写简洁用例、编写黑箱用例、从参与者的目标出发的编写

**发现参与者、目标和用例**：选择系统边界、找出参与者和目标、定义用例

**选择系统边界**
系统边界的不同，可能的参与者是不同的

![image-20200821145650880](H:\markdown文档\myMarkdown\课程相关\TMP\系统分析与设计.assets\image-20200821145650880.png)

**基本业务过程（EBP）**

**EBP规则**：1.以一个基本业务过程为单位来确定用例，就是基本业务过程级别的用例。2.过高级别的定义无法清除的描述目标。3.过低级别的定义不便于描述用户的真实意图和总体目标。

**用例的类型和格式**：

* 摘要(简洁)用例：概要性的成功场景的文字描述。
* 详述用例：详述用例的各个步骤和其中的变化，包括前置条件、扩展流程、变化情况、成功保障等。
* 非正式(临时)用例：临时的描述部分场景。

### 处理销售的用例描述

主要参与者：收銀員 

相关人员和利益：

* 收銀員：希望準確、快速的輸入方式，也不會發生付款錯誤的情形，因為收銀機抽屜如果短缺金額的話，要從他們的薪水裡扣。
* 銷售員：希望銷售佣金能（隨銷售）馬上更新。 • 顧客：希望買到商品、省時省力的快速服務。希望購買後保 證能退貨。 
* 公司：希望準確記錄交易，並且滿足顧客喜好。希望記錄付款授權服務的付款應收帳款。希望在無法獲得伺服器元件（ 例如遠端信用驗證）的情況下，也能容錯、繼續捕捉銷售紀錄。希望自動、快速更新會計與庫存紀錄。
* 政府稅務單位：希望收到每筆銷售稅金。賦稅單位可能有多個，例如國家級、州級、郡級。
* 付款授權服務：希望用正確格式與協定收到數位授權請求。 希望顧客對商店的應付帳款是很精確的。

前置条件：收銀员身份已验证，并授权。

成功保证（后置条件）：儲存銷售。正确算出税金。更新會計與庫存紀錄。記錄佣金。產生收據。記錄付款授權認可。
主要成功场景（基本流程）：1. 顧客帶著要買的商品與／或服務到 POS 的結帳櫃檯前面。2. 收銀員啟動一筆新的銷售。3. 收銀員輸入商品識別碼。4. 系統記錄銷售明細，並且顯示商品說明文字、價格與累計購買總金額。根據一組計價規則計算價格。收銀員重複步驟 3-4 直到完成所有商品为止。 5. 系統显示包含稅金的總金額。6. 收銀員告知顧客總金額，並且要求顧客付款。7. 顧客付款，並且由系統處理付款。8. 系統記錄完成的銷售，並且送出銷售與付款資訊到外部 會計系統（為了會計與佣金）與庫存系統（為了更新庫存 。）9. 系統打印收據。10. 顧客帶著商品與收據（如果有的話）離開。

扩充（或替代流程）：a. 在任何時間點，當系統失效時： •為了支援系統復原能力並修正會計資料，確認交易中所有容易受影響的狀態與事件，不論是在情節的哪個步驟都能復原。1. 收銀員重新啟動系統、登入系統，並且要求還原成先前狀態。2. 系統重新還原成之前的狀態。2a. 系統偵測到阻礙復原的非正常狀態：1. 系統告知阻礙復原的錯誤、從錯誤中還原，並且進入未資料時的狀態。2. 收銀員啟動一筆新的銷售。3a. 無效的識別碼：1. 系統告知錯誤，並且拒絕輸入商品。3b.同種類的商品有多個，而且追蹤每個商品的唯一識別碼並不是很重要的事（例如五個有包裝過、同商品種類的蔬菜堡） ： 1. 收銀員輸入商品種類的識別碼與數量。3-6a: 顧客要求收銀員移除某個原先想購買的商品：1. 收銀員輸入銷售中要移除的商品識別碼。2. 系統更新現在的總銷售額。3-6b. 顧客告訴銷售員要取消銷售：1. 收銀員取消這一筆銷售。3-6c. 收銀員暫停這筆銷售：1. 系統把銷售記錄下來，而且之後可以從任何 POS 終端設備中取回這筆銷售紀錄。4a. 不希望採用系統所產生的某項商品價格（例如顧客抱怨說某個東西應該是比較低的價格）：1. 收銀員輸入超額部分金額。2. 系統秀出新的價格。5a. 系統偵測到跟外部稅金計算系統服務之間的通訊錯誤：1. 系統重新啟動 POS 節點上的服務，然後繼續。1a. 系統偵測到服務並沒有被重新啟動。1. 系統告知錯誤。2. 收銀員可能手動計算稅金並輸入稅金，或者取消這筆銷售。 5b. 顧客說他們具有折扣身分（例如雇員、具有特別優惠身份的顧客）：1. 收銀員對系統下折扣請求。 2. 收銀員輸入顧客識別資料。3. 系統根據折扣規則，呈現總折扣額。 5c. 顧客說他們的個人帳戶中還有餘額，把這些餘額用在銷售 中：1. 收銀員發出使用餘額請求。2. 收銀員輸入顧客識別資料。3. 系統把餘額用在銷售中，直到價格 = 0 ，並且減少餘額。6a. 顧客說他們想用現金付，不過現金不足。1a. 顧客用其它付款方式。1b. 顧客告訴收銀員取消這筆銷售。收銀員取消系統中的這筆銷售。 7a. 用現金付款：1. 收銀員輸入顧客付的現金。2. 系統呈現結餘金額，並打開現金抽屜。3. 收銀員放進顧客付的現金，然後拿結餘金額給顧客。4. 系統記錄現金付款金額。7b. 用信用卡付款：1. 顧客輸入他們的信用卡帳號資訊。2. 系統送出付款授權請求到外部付款授權服務系統， 要求付款認可。2a. 系統偵測到跟外部系統間的通訊發生錯誤：1. 系統告知收銀員錯誤。2. 收銀員要求顧客用其它付款方式。3. 系統收到付款認可，並且告知收銀員付款已經被認可過。3a. 系統收到拒絕付款訊息：1. 系統告知收銀員付款已經被拒絕。2. 收銀員要求顧客用其它付款方式。4. 系統記錄信用付款資訊，其中包括付款認可資訊。5. 系統呈現信用付款簽名輸入機制。6. 收銀員要求顧客做信用付款簽名。顧客輸入簽名。7c. 用支票付款… 7d. 用賒帳付款…7e. 顧客出示折價卷：1. 在處理付款之前，收銀員記錄每個折價卷，而且系 統把價格減掉適當金額。為了處理會計問題，系統會記錄用過的折價卷。1a. 所輸入的折價卷並不能用在任何購買的商品上 ：1. 系統告知收銀員錯誤。 9a. 有產品回扣存在：1. 系統呈現回扣型式以及回扣商品的回扣收據。9b. 顧客要求贈品收據（不秀出任何價格）：1. 收銀員要求贈品收據，然後系統秀出收據。

 特殊需求： • 大型、平板監視器上的觸控式螢幕使用者介面 。必須在 1 公尺外也能看得到上面的字。 • 要能夠在 30 秒內回應 90% 的信用授權。 • 由於某種未知原因造成存取遠端服務（例如庫 存系統）失效時，希望系統有好一點的復原能 力。 • 所顯示的文字是國際化語言。 • 能夠在步驟3 到7 之間嵌入企業規則。

技術性或資料變異清單： • 3a. （如果有條碼的話）用鍵盤或條碼雷射掃 描器輸入商品識別碼。 • 3b. 商品識別碼可以是 UPC 、EAN 、JAN 或 SKU 其中任何一種編碼方式。 • 7a. 用讀卡機或鍵盤輸入信用帳戶資訊。 • 7b. 在紙收據上做信用付款簽名。不過在兩年 之內，我們預期有許多顧客將希望用數位方式 簽名。 • …

主要参与者： • 使用系统服务满足自己目标的。 • 寻求主要参与者是为了寻找目标，它驱动用例。 • 例如：收银员

次要参与者： • 为系统提供服务。 • 次要参与者可以说明外部接口。 • 例如：自动支付服务 

后台参与者：• 对用例感兴趣的 • 为使系统能够满足所有需要。 • 例如：税务官员

POS的参与者：经理： • 啟動 • 關閉系統 • … 。銷售活动系統： • 分析銷售业绩資料 • … … … … • 銷售活動系統是一个远端应用，它經常透過網路跟每個 POS 節點要求銷售。收銀員： • 处理銷售 • 处理出租 • 处理退貨 • 存入現金 • 取出現金 • …。 系統管理員： • 新增使用者 • 修改使用者 • 刪除使用者 • 管理安全性 • 管理系統表格 • …

### 用例图

 UML的用例图（use case diagram）用于表示用例和参与者之间的关系。

用例分析的主要结果是用例的文本，而不是用例图。

用例图可以起到对用例的直观引导作用

<img src="H:\markdown文档\myMarkdown\课程相关\TMP\系统分析与设计.assets\image-20200821152524673.png" alt="image-20200821152524673" style="zoom:67%;" />

<img src="H:\markdown文档\myMarkdown\课程相关\TMP\系统分析与设计.assets\image-20200821152600850.png" alt="image-20200821152600850" style="zoom:67%;" />

<img src="H:\markdown文档\myMarkdown\课程相关\TMP\系统分析与设计.assets\image-20200821152655130.png" alt="image-20200821152655130" style="zoom:67%;" />

### 用例驱动的开发计划

统一过程（UP）中用例驱动的开发方式 ：开发团队以完成一个或几个用例为目标。

系统用例和业务用例：1.系统用例是系统环境中的参与者及其目标 2.业务建模中使用业务用例 3.例如：收银员（系统）、顾客（业务）、供应商（业务） 

初始阶段不需要写出所有用例

 ## 从初始到细化

初始阶段完成了什么 ：• 依据不同项目的主要需求 • 命名了大多数的参与者、目标和用例 • 用简短格式书写了大多数用例 • 风险需求（技术、进度、市场） • 概念验证（关键风险技术可行性） • 系统架构的构想 

**迭代计划（细化的工作计划）**

* 标准和规范：1.项目开发的规范 2.如何开发过程管理，如何提交制品？ 3.使用什么分析设计工具？ 
* 迭代计划：1.风险驱动的：先做哪些？做到什么地步？2.用况驱动的：一个用况将被分配到哪几阶段的迭代中？

**开发计划**

* 规范：文档书写规范：格式、发布手段等
* 迭代过程

<img src="H:\markdown文档\myMarkdown\课程相关\TMP\系统分析与设计.assets\image-20200821154204811.png" alt="image-20200821154204811" style="zoom: 67%;" />

<img src="H:\markdown文档\myMarkdown\课程相关\TMP\系统分析与设计.assets\image-20200821154237876.png" alt="image-20200821154237876" style="zoom:67%;" />

##  领域模型—可视化概念

领域模型(Doman Model) ：OOA中，将相关的领域（问题的论域）分解成单个的概念类或现实对象。领域模型是概念类或者领域的现实对象（非软件对象）的可视化表示。又称：概念模型、领域对象模型。是业务建模的过程中的一个工件

**领域模型的表示**：UML中可以将领域模型表示为类图的形式